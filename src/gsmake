#/bin/bash
#############################################
##############################################
#Author	: EinsXiao@gmail.com
#Version  : 2.1
#Date 	: 2013/11/17
#Attention:
#	Please makesure that your #include lines
#	does not contain any single space whether 
#	the these line are commented of not!!!!!!
##############################################
##############################################
sfix=".cu"
flags="-g -G"
flags="-O2"
excu="gs"
libs="-lcurand -lcufft"
prefix="$HOME/bin"
##############################################
cc="nvcc"
##############################################
##############################################
#renew the pub_main.h via the pub_main.h.mod
#renew the gs.cu via the gs.cu.mod
echo `ls dynamics_*.h` > .dynamics_files.tmp
diff .dynamics_files.tmp .dynamics_files 1>.tmp 2>>.tmp
num=`grep -c "" .tmp`
if [ ${num} -gt 0 ]; then
  echo "Dynamics files have been changed!!! reconstruct pub_main.h and gs.cu!!!"
  mhpub="pub_main.h"
  hpub=".pub_main.h"
  mgcu="gs.cu"
  gcu=".gs.cu"
  num11=`grep -n "GS_SYS_DEFINE_START" $mhpub |awk -F: '{print $1}'`
  num12=`grep -n "GS_SYS_DEFINE_END" $mhpub |awk -F: '{print $1}'`
  num21=`grep -n "GS_SYS_DEFINE_START" $mgcu |awk -F: '{print $1}'`
  num22=`grep -n "GS_SYS_DEFINE_END" $mgcu |awk -F: '{print $1}'`
  sed -n "1,${num11} p" $mhpub > $hpub
  sed -n "1,${num21} p" $mgcu > $gcu
  for hfile in `ls dynamics_*.h`; do
    echo "#include\"$hfile\"" >> $hpub
    name=${hfile#dynamics_}
    name=${name%.h}
    Name=`echo ${name:0:1}|tr a-z A-Z `${name:1}
    echo "  if (sys == \"${name}\"	) { Dyna[DynaID] = new Dynamics${Name}; hassys=true; }" >>$gcu
  done
  sed -n "${num12},\$ p" $mhpub >> $hpub
  sed -n "${num22},\$ p" $mgcu >> $gcu
  mv $hpub $mhpub
  mv $gcu $mgcu
  echo "$mhpub and $mgcu is renewed!!!"
fi
mv .dynamics_files.tmp .dynamics_files
##############################################
om="makefile"
##############################################
if [[ "$sfix" == ".cu" ]]; then
  cc="nvcc"
elif [[ "$sfix" == ".cpp" ]]; then
  cc="g++"
fi

echo "#emake log file for emake" >emake.log
echo "
#compile setting
CC = $cc
FLAGS = $flags 
SRCS = \$(wildcard *$sfix)
OBJECTS = \$(patsubst %$sfix, %.o, \$(SRCS))
EXCU = $excu
LIB	=  $libs
$excu: \$(OBJECTS)
	\$(CC) \$(FLAGS) -o \$(EXCU)  \$(OBJECTS) \$(LIB) ">$om
sorcs=$(ls *$sfix)
for src in $sorcs; do
  srco=${src/$sfix/.o}
  line="$srco: $src"
  headers=`cat $src |grep "#include"`
  #echo $headers
  for h in $headers; do
    echo "detected 	$h	 	in $src" >>emake.log
    hh=${h//$' '}
    hh=${h/$'#include'}
    hh=${hh//$'"'}
    if [[ "$hh" == "//"* ]]; then 
	 echo "$hh ignored" >>emake.log
    elif [[ "$hh" == "<"* ]]; then 
	 echo "$hh ignored">>emake.log
    else 
	 line=$line" "$hh # need to include the files included by the folder too.... recursively if possible, but here not...
	 subheaders=`cat $hh |grep "#include"`
	 for subh in $subheaders; do
	   echo "detected 	$subh	 	in $hh" >>emake.log
	   subhh=${subh//$' '}
	   subhh=${subh/$'#include'}
	   subhh=${subhh//$'"'}
	   if [[ "$subhh" == "//"* ]]; then 
	     echo "$subhh ignored" >>emake.log
	   elif [[ "$subhh" == "<"* ]]; then 
	     echo "$subhh ignored">>emake.log
	   else 
	     line=$line" ""`dirname $hh`/"$subhh 
	   fi
	 done
    fi
  done

  echo $line >>$om
  echo "	\$(CC) \$(FLAGS) -c \$< -o \$@" >>$om
done
echo "
clean:
	rm *.o
	rm \$(EXCU)
install:
	cp \$(EXCU) $prefix/
">>$om
echo "##################################################">>emake.log
echo "###	Auto Makefile: $om	is created!!!">>emake.log
echo "##################################################">>emake.log
#echo "$om	:">>emake.log
#cat $om>>emake.log
make -f $om
