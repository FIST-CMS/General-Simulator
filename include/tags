!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Arr	ComplexData.h	/^    complex_E 	*Arr;$/;"	m	class:ComplexData
Arr	data.h	/^	   type 		*Arr;$/;"	m	class:DATA_NS::Data
ArrSet	data.h	/^    int ArrSet(type *arr,...){\/\/the first argument is the array, second is the length, then each element$/;"	f	namespace:DATA_NS
Arr_dev	ComplexData.h	/^    cucomplex_E 	*Arr_dev;$/;"	m	class:ComplexData
Arr_dev	data.h	/^	   type_dev 	*Arr_dev;$/;"	m	class:DATA_NS::Data
ComplexData	ComplexData.h	/^ComplexData::ComplexData(int *dimArr){$/;"	f	class:ComplexData
ComplexData	ComplexData.h	/^ComplexData::ComplexData(int n1){\/\/Initialize 1-D data$/;"	f	class:ComplexData
ComplexData	ComplexData.h	/^ComplexData::ComplexData(int n1,int n2){\/\/Initialize 2-D data$/;"	f	class:ComplexData
ComplexData	ComplexData.h	/^ComplexData::ComplexData(int n1,int n2,int n3){\/\/Initialize 3-D data }$/;"	f	class:ComplexData
ComplexData	ComplexData.h	/^class ComplexData{$/;"	c
Created	ComplexData.h	/^    bool Created;$/;"	m	class:ComplexData
DATA_Eins_H	data.h	12;"	d
DATA_NS	data.h	/^namespace DATA_NS{$/;"	n
Data	data.h	/^    Data<type,type_dev>::Data(int n,...){$/;"	f	class:DATA_NS::Data
Data	data.h	/^    class Data{$/;"	c	namespace:DATA_NS
Data_DEV	data.h	17;"	d
Data_HOST	data.h	16;"	d
Data_HOST_DEV	data.h	18;"	d
DevToHost	data.h	/^    int Data<type,type_dev>::DevToHost(){$/;"	f	class:DATA_NS::Data
Dimension	ComplexData.h	/^    int Dimension;$/;"	m	class:ComplexData
Dimension	data.h	/^	   int 		Dimension;$/;"	m	class:DATA_NS::Data
Dump	ComplexData.h	/^int ComplexData::Dump(char* filename){$/;"	f	class:ComplexData
Dump	data.h	/^    int Data<type, type_dev>::Dump(){$/;"	f	class:DATA_NS::Data
Dump	data.h	/^    int Data<type, type_dev>::Dump(FILE* file){$/;"	f	class:DATA_NS::Data
Dump	data.h	/^    int Data<type, type_dev>::Dump(char* filename){$/;"	f	class:DATA_NS::Data
E	mathFloat_E.h	/^const float E=2.7182818284590;$/;"	v
E	math_E.h	/^const double E=2.7182818284590;$/;"	v
FFTW3_H	fftw322/include/fftw3.h	48;"	d
FFTW_ALLOW_LARGE_GENERIC	fftw322/include/fftw3.f	/^      INTEGER FFTW_ALLOW_LARGE_GENERIC$/;"	v
FFTW_ALLOW_LARGE_GENERIC	fftw322/include/fftw3.h	397;"	d
FFTW_ALLOW_PRUNING	fftw322/include/fftw3.f	/^      INTEGER FFTW_ALLOW_PRUNING$/;"	v
FFTW_ALLOW_PRUNING	fftw322/include/fftw3.h	404;"	d
FFTW_BACKWARD	fftw322/include/fftw3.f	/^      INTEGER FFTW_BACKWARD$/;"	v
FFTW_BACKWARD	fftw322/include/fftw3.h	375;"	d
FFTW_BELIEVE_PCOST	fftw322/include/fftw3.f	/^      INTEGER FFTW_BELIEVE_PCOST$/;"	v
FFTW_BELIEVE_PCOST	fftw322/include/fftw3.h	392;"	d
FFTW_CONCAT	fftw322/include/fftw3.h	65;"	d
FFTW_CONSERVE_MEMORY	fftw322/include/fftw3.f	/^      INTEGER FFTW_CONSERVE_MEMORY$/;"	v
FFTW_CONSERVE_MEMORY	fftw322/include/fftw3.h	383;"	d
FFTW_DEFINE_API	fftw322/include/fftw3.h	120;"	d
FFTW_DEFINE_COMPLEX	fftw322/include/fftw3.h	368;"	d
FFTW_DEFINE_COMPLEX	fftw322/include/fftw3.h	369;"	d
FFTW_DEFINE_COMPLEX	fftw322/include/fftw3.h	60;"	d
FFTW_DEFINE_COMPLEX	fftw322/include/fftw3.h	62;"	d
FFTW_DESTROY_INPUT	fftw322/include/fftw3.f	/^      INTEGER FFTW_DESTROY_INPUT$/;"	v
FFTW_DESTROY_INPUT	fftw322/include/fftw3.h	381;"	d
FFTW_DHT	fftw322/include/fftw3.f	/^      INTEGER FFTW_DHT$/;"	v
FFTW_DHT	fftw322/include/fftw3.h	/^     FFTW_R2HC=0, FFTW_HC2R=1, FFTW_DHT=2,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_ESTIMATE	fftw322/include/fftw3.f	/^      INTEGER FFTW_ESTIMATE$/;"	v
FFTW_ESTIMATE	fftw322/include/fftw3.h	387;"	d
FFTW_ESTIMATE_PATIENT	fftw322/include/fftw3.f	/^      INTEGER FFTW_ESTIMATE_PATIENT$/;"	v
FFTW_ESTIMATE_PATIENT	fftw322/include/fftw3.h	391;"	d
FFTW_EXHAUSTIVE	fftw322/include/fftw3.f	/^      INTEGER FFTW_EXHAUSTIVE$/;"	v
FFTW_EXHAUSTIVE	fftw322/include/fftw3.h	384;"	d
FFTW_EXTERN	fftw322/include/fftw3.h	81;"	d
FFTW_EXTERN	fftw322/include/fftw3.h	83;"	d
FFTW_EXTERN	fftw322/include/fftw3.h	86;"	d
FFTW_FORWARD	fftw322/include/fftw3.f	/^      INTEGER FFTW_FORWARD$/;"	v
FFTW_FORWARD	fftw322/include/fftw3.h	374;"	d
FFTW_HC2R	fftw322/include/fftw3.f	/^      INTEGER FFTW_HC2R$/;"	v
FFTW_HC2R	fftw322/include/fftw3.h	/^     FFTW_R2HC=0, FFTW_HC2R=1, FFTW_DHT=2,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_MANGLE_DOUBLE	fftw322/include/fftw3.h	66;"	d
FFTW_MANGLE_FLOAT	fftw322/include/fftw3.h	67;"	d
FFTW_MANGLE_LONG_DOUBLE	fftw322/include/fftw3.h	68;"	d
FFTW_MANGLE_QUAD	fftw322/include/fftw3.h	69;"	d
FFTW_MEASURE	fftw322/include/fftw3.f	/^      INTEGER FFTW_MEASURE$/;"	v
FFTW_MEASURE	fftw322/include/fftw3.h	380;"	d
FFTW_NO_BUFFERING	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_BUFFERING$/;"	v
FFTW_NO_BUFFERING	fftw322/include/fftw3.h	395;"	d
FFTW_NO_DFT_R2HC	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_DFT_R2HC$/;"	v
FFTW_NO_DFT_R2HC	fftw322/include/fftw3.h	393;"	d
FFTW_NO_FIXED_RADIX_LARGE_N	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_FIXED_RADIX_LARGE_N$/;"	v
FFTW_NO_FIXED_RADIX_LARGE_N	fftw322/include/fftw3.h	403;"	d
FFTW_NO_INDIRECT_OP	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_INDIRECT_OP$/;"	v
FFTW_NO_INDIRECT_OP	fftw322/include/fftw3.h	396;"	d
FFTW_NO_NONTHREADED	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_NONTHREADED$/;"	v
FFTW_NO_NONTHREADED	fftw322/include/fftw3.h	394;"	d
FFTW_NO_RANK_SPLITS	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_RANK_SPLITS$/;"	v
FFTW_NO_RANK_SPLITS	fftw322/include/fftw3.h	398;"	d
FFTW_NO_SIMD	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_SIMD$/;"	v
FFTW_NO_SIMD	fftw322/include/fftw3.h	401;"	d
FFTW_NO_SLOW	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_SLOW$/;"	v
FFTW_NO_SLOW	fftw322/include/fftw3.h	402;"	d
FFTW_NO_TIMELIMIT	fftw322/include/fftw3.h	377;"	d
FFTW_NO_VRANK_SPLITS	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_VRANK_SPLITS$/;"	v
FFTW_NO_VRANK_SPLITS	fftw322/include/fftw3.h	399;"	d
FFTW_NO_VRECURSE	fftw322/include/fftw3.f	/^      INTEGER FFTW_NO_VRECURSE$/;"	v
FFTW_NO_VRECURSE	fftw322/include/fftw3.h	400;"	d
FFTW_PATIENT	fftw322/include/fftw3.f	/^      INTEGER FFTW_PATIENT$/;"	v
FFTW_PATIENT	fftw322/include/fftw3.h	386;"	d
FFTW_PRESERVE_INPUT	fftw322/include/fftw3.f	/^      INTEGER FFTW_PRESERVE_INPUT$/;"	v
FFTW_PRESERVE_INPUT	fftw322/include/fftw3.h	385;"	d
FFTW_R2HC	fftw322/include/fftw3.f	/^      INTEGER FFTW_R2HC$/;"	v
FFTW_R2HC	fftw322/include/fftw3.h	/^     FFTW_R2HC=0, FFTW_HC2R=1, FFTW_DHT=2,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_REDFT00	fftw322/include/fftw3.f	/^      INTEGER FFTW_REDFT00$/;"	v
FFTW_REDFT00	fftw322/include/fftw3.h	/^     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_REDFT01	fftw322/include/fftw3.f	/^      INTEGER FFTW_REDFT01$/;"	v
FFTW_REDFT01	fftw322/include/fftw3.h	/^     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_REDFT10	fftw322/include/fftw3.f	/^      INTEGER FFTW_REDFT10$/;"	v
FFTW_REDFT10	fftw322/include/fftw3.h	/^     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_REDFT11	fftw322/include/fftw3.f	/^      INTEGER FFTW_REDFT11$/;"	v
FFTW_REDFT11	fftw322/include/fftw3.h	/^     FFTW_REDFT00=3, FFTW_REDFT01=4, FFTW_REDFT10=5, FFTW_REDFT11=6,$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_RODFT00	fftw322/include/fftw3.f	/^      INTEGER FFTW_RODFT00$/;"	v
FFTW_RODFT00	fftw322/include/fftw3.h	/^     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_RODFT01	fftw322/include/fftw3.f	/^      INTEGER FFTW_RODFT01$/;"	v
FFTW_RODFT01	fftw322/include/fftw3.h	/^     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_RODFT10	fftw322/include/fftw3.f	/^      INTEGER FFTW_RODFT10$/;"	v
FFTW_RODFT10	fftw322/include/fftw3.h	/^     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_RODFT11	fftw322/include/fftw3.f	/^      INTEGER FFTW_RODFT11$/;"	v
FFTW_RODFT11	fftw322/include/fftw3.h	/^     FFTW_RODFT00=7, FFTW_RODFT01=8, FFTW_RODFT10=9, FFTW_RODFT11=10$/;"	e	enum:fftw_r2r_kind_do_not_use_me
FFTW_UNALIGNED	fftw322/include/fftw3.f	/^      INTEGER FFTW_UNALIGNED$/;"	v
FFTW_UNALIGNED	fftw322/include/fftw3.h	382;"	d
FFTW_WISDOM_ONLY	fftw322/include/fftw3.f	/^      INTEGER FFTW_WISDOM_ONLY$/;"	v
FFTW_WISDOM_ONLY	fftw322/include/fftw3.h	388;"	d
Fill	data.h	/^    int Data<type,type_dev>::Fill(real v){ \/\/ fill the array with value v$/;"	f	class:DATA_NS::Data
GaussCMInverse	mathFloat_E.h	/^int GaussCMInverse(float *AA,float *B,int n){$/;"	f
HostToDev	data.h	/^    int Data<type,type_dev>::HostToDev(){$/;"	f	class:DATA_NS::Data
Im	mathFloat_E.h	/^	float Im;$/;"	m	class:complex_E
Im	mathFloat_E.h	/^	float Im;$/;"	m	class:cucomplex_E
Im	math_E.h	/^	double Im;$/;"	m	class:complex_E
Index	ComplexData.h	/^int ComplexData::Index(int *tposArr){\/\/translate the multidimention index to 1-D storage form$/;"	f	class:ComplexData
Init	ComplexData.h	/^int ComplexData::Init(int *dimArr){\/\/Assign data dype, dimension, and memory$/;"	f	class:ComplexData
MaxBlocks	mathCuda_E.h	/^const int MaxBlocks=65536;$/;"	v
MaxBlocksDim	mathFloatCuda_E.h	/^const int MaxBlocksDim=65535;$/;"	v
N	ComplexData.h	/^    int 	*N;\/\/0: Total Arr elements; 1-Dimen: length of respective dimension$/;"	m	class:ComplexData
N	data.h	/^	   int 		*N;\/\/0: Total Arr elements number; 1-Dimen: length of respective dimension$/;"	m	class:DATA_NS::Data
NormalDistributionX	mathFloat_E.h	/^float NormalDistributionX(){ float U1,U2,R,Z,th; U1=randreal();U2=randreal(); R=sqrt(-2*log(U2)); th=2*3.1415926*U1; Z=R*cos(th); return Z; }$/;"	f
NormalDistributionX	mathFloat_E.h	/^float NormalDistributionX(float mean,float sd){ return mean+sd*NormalDistributionX(); }$/;"	f
NormalDistributionX	math_E.h	/^double NormalDistributionX(){ double U1,U2,R,Z,th; U1=randreal();U2=randreal(); R=sqrt(-2*log(U2)); th=2*3.1415926*U1; Z=R*cos(th); return Z; }$/;"	f
NormalDistributionX	math_E.h	/^double NormalDistributionX(double mean,double sd){ return mean+sd*NormalDistributionX(); }$/;"	f
Part	ComplexData.h	/^int ComplexData::Part(int *posArr,complex_E &v){$/;"	f	class:ComplexData
Part1D	ComplexData.h	/^complex_E ComplexData::Part1D(int n1){$/;"	f	class:ComplexData
Part2D	ComplexData.h	/^complex_E ComplexData::Part2D(int n1,int n2){$/;"	f	class:ComplexData
Part3D	ComplexData.h	/^complex_E ComplexData::Part3D(int n1,int n2,int n3){$/;"	f	class:ComplexData
Pi	mathFloat_E.h	/^const float Pi=3.1415926;$/;"	v
Pi	math_E.h	/^const double Pi=3.1415926;$/;"	v
Print	ComplexData.h	/^int ComplexData::Print(int *dimArr){$/;"	f	class:ComplexData
Print1D	ComplexData.h	/^int ComplexData::Print1D(int n1){$/;"	f	class:ComplexData
Print2D	ComplexData.h	/^int ComplexData::Print2D(int n1, int n2){$/;"	f	class:ComplexData
Print3D	ComplexData.h	/^int ComplexData::Print3D(int n1, int n2, int n3){$/;"	f	class:ComplexData
Re	mathFloat_E.h	/^	float Re;$/;"	m	class:complex_E
Re	mathFloat_E.h	/^	float Re;$/;"	m	class:cucomplex_E
Re	math_E.h	/^	double Re;$/;"	m	class:complex_E
Read	ComplexData.h	/^int ComplexData::Read(char* filename){$/;"	f	class:ComplexData
Read	data.h	/^    int Data<type, type_dev>::Read(char* filename){$/;"	f	class:DATA_NS::Data
Read	data.h	/^    int Data<type,type_dev>::Read(){$/;"	f	class:DATA_NS::Data
Set	ComplexData.h	/^int ComplexData::Set(int *posArr,complex_E v){$/;"	f	class:ComplexData
Set1D	ComplexData.h	/^int ComplexData::Set1D(int n1,complex_E v){ $/;"	f	class:ComplexData
Set2D	ComplexData.h	/^int ComplexData::Set2D(int n1,int n2,complex_E v){ $/;"	f	class:ComplexData
Set3D	ComplexData.h	/^int ComplexData::Set3D(int n1,int n2,int n3,complex_E v){ $/;"	f	class:ComplexData
SetZeros	mathFloat_E.h	/^int SetZeros(float * _m,int n){$/;"	f
ThreadsInOneBlock	mathCuda_E.h	/^const int ThreadsInOneBlock=128;$/;"	v
abs_E	mathFloat_E.h	10;"	d
abs_E	math_E.h	10;"	d
addByNumberCuda	mathFloatCuda_E.h	/^int addByNumberCuda(cucomplex_E*arrin,cucomplex_E num,cucomplex_E *arrout ,int n){$/;"	f
addByNumberCuda	mathFloatCuda_E.h	/^int addByNumberCuda(float*arrin,float num,float *arrout ,int n){$/;"	f
addByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void addByNumberCuda_Kernel(cucomplex_E*arrin,cucomplex_E num,cucomplex_E *arrout ,int n){$/;"	f
addByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void addByNumberCuda_Kernel(float*arrin,float num,float *arrout ,int n){$/;"	f
addCuda	mathCuda_E.h	/^int addCuda(double*arrin1,double *arrin2,double *arrout ,int n){$/;"	f
addCuda	mathFloatCuda_E.h	/^int addCuda(cucomplex_E*arrin1,cucomplex_E *arrin2,cucomplex_E *arrout ,int n){$/;"	f
addCuda	mathFloatCuda_E.h	/^int addCuda(float*arrin1,float *arrin2,float *arrout ,int n){$/;"	f
addCuda_Kernel	mathCuda_E.h	/^__global__ void addCuda_Kernel(double*arrin1,double*arrin2 ,double *arrout ,int n){$/;"	f
addCuda_Kernel	mathFloatCuda_E.h	/^__global__ void addCuda_Kernel(cucomplex_E *arrin1,cucomplex_E *arrin2 ,cucomplex_E *arrout ,int n){$/;"	f
addCuda_Kernel	mathFloatCuda_E.h	/^__global__ void addCuda_Kernel(float*arrin1,float*arrin2 ,float *arrout ,int n){$/;"	f
complex_E	mathFloat_E.h	/^	complex_E(){ Re=0; Im=0; }$/;"	f	class:complex_E
complex_E	mathFloat_E.h	/^	complex_E(float c[2]){ Re=c[0]; Im=c[1]; }$/;"	f	class:complex_E
complex_E	mathFloat_E.h	/^	complex_E(float real,float image){ this->Re=real; this->Im=image; }$/;"	f	class:complex_E
complex_E	mathFloat_E.h	/^class complex_E{$/;"	c
complex_E	math_E.h	/^	complex_E(){ Re=0; Im=0; }$/;"	f	class:complex_E
complex_E	math_E.h	/^	complex_E(double c[2]){ Re=c[0]; Im=c[1]; }$/;"	f	class:complex_E
complex_E	math_E.h	/^	complex_E(double real,double image){ this->Re=real; this->Im=image; }$/;"	f	class:complex_E
complex_E	math_E.h	/^class complex_E{$/;"	c
cuadd	mathFloat_E.h	/^__device__ cucomplex_E cuadd(cucomplex_E c,float d){ return cucomplex_E(d+c.Re,c.Im); }$/;"	f
cuadd	mathFloat_E.h	/^__device__ cucomplex_E cuadd(cucomplex_E c1,cucomplex_E c2){return cucomplex_E(c1.Re+c2.Re,c1.Im+c2.Im); }$/;"	f
cuadd	mathFloat_E.h	/^__device__ cucomplex_E cuadd(float d,cucomplex_E c){ return cucomplex_E(d+c.Re,c.Im); }$/;"	f
cucomplex_E	mathFloat_E.h	/^	__device__ cucomplex_E(){ Re=0; Im=0; }$/;"	f	class:cucomplex_E
cucomplex_E	mathFloat_E.h	/^	__device__ cucomplex_E(complex_E c){ Re=c.Re; Im=c.Im; }$/;"	f	class:cucomplex_E
cucomplex_E	mathFloat_E.h	/^	__device__ cucomplex_E(float c[2]){ Re=c[0]; Im=c[1]; }$/;"	f	class:cucomplex_E
cucomplex_E	mathFloat_E.h	/^	__device__ cucomplex_E(float real,float image){ this->Re=real; this->Im=image; }$/;"	f	class:cucomplex_E
cucomplex_E	mathFloat_E.h	/^class cucomplex_E{$/;"	c
cudaSetDeviceTorque	cuda_E.h	/^int cudaSetDeviceTorque(){$/;"	f
cudaSetDeviceTorque	cuda_E.h	/^int cudaSetDeviceTorque(int id){$/;"	f
cudivi	mathFloat_E.h	/^__device__ cucomplex_E cudivi(cucomplex_E c,float d){ return cucomplex_E(c.Re\/d,c.Im\/d);}$/;"	f
cudivi	mathFloat_E.h	/^__device__ cucomplex_E cudivi(cucomplex_E c1,cucomplex_E c2){ float mo=pow2_E(c2.Re)+pow2_E(c2.Im);return cucomplex_E((c1.Re*c2.Re+c1.Im*c2.Im)\/mo,(c1.Im*c2.Re-c1.Re*c2.Im)\/mo);}$/;"	f
cudivi	mathFloat_E.h	/^__device__ cucomplex_E cudivi(float d,cucomplex_E c){ float mo=pow2_E(c.Re)+pow2_E(c.Im); return cucomplex_E(c.Re*d\/mo,c.Im*d\/mo);}$/;"	f
cufloat	mathFloat_E.h	/^	__device__ float cufloat(){return Re;}$/;"	f	class:cucomplex_E
cuminus	mathFloat_E.h	/^__device__ cucomplex_E cuminus(cucomplex_E c,float d){ return cucomplex_E(c.Re-d,c.Im); }$/;"	f
cuminus	mathFloat_E.h	/^__device__ cucomplex_E cuminus(cucomplex_E c1,cucomplex_E c2){ return cucomplex_E(c1.Re-c2.Re,c1.Im-c2.Im); }$/;"	f
cuminus	mathFloat_E.h	/^__device__ cucomplex_E cuminus(float d,cucomplex_E c){ return cucomplex_E(d-c.Re,-c.Im); }$/;"	f
cumulti	mathFloat_E.h	/^__device__ cucomplex_E cumulti(cucomplex_E c,float d){ return cucomplex_E(c.Re*d,c.Im*d);}$/;"	f
cumulti	mathFloat_E.h	/^__device__ cucomplex_E cumulti(cucomplex_E c1,cucomplex_E c2){ return cucomplex_E(c1.Re*c2.Re-c1.Im*c2.Im,c1.Re*c2.Im+c1.Im*c2.Re);}$/;"	f
cumulti	mathFloat_E.h	/^__device__ cucomplex_E cumulti(float d,cucomplex_E c){ return cucomplex_E(c.Re*d,c.Im*d);}$/;"	f
cumulti	mathFloat_E.h	/^__device__ cucomplex_E cumulti(float d,float c){ return cucomplex_E(c*d,0.0f);}$/;"	f
cuset	mathFloat_E.h	/^	__device__ int cuset(cucomplex_E &left,cucomplex_E right){$/;"	f
cuset	mathFloat_E.h	/^	__device__ int cuset(cucomplex_E &left,float right){$/;"	f
cuunequal	mathFloat_E.h	/^__device__ int cuunequal(cucomplex_E c1,cucomplex_E c2){if (c1.Re!=c2.Re||c1.Im!=c2.Im)return 1;else return 0;}$/;"	f
cuunequal	mathFloat_E.h	/^__device__ int cuunequal(cucomplex_E c1,float c2){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
cuunequal	mathFloat_E.h	/^__device__ int cuunequal(float c2,cucomplex_E c1){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
div2P_E	mathFloat_E.h	19;"	d
div2P_E	math_E.h	19;"	d
diviCuda	mathFloatCuda_E.h	/^int diviCuda(cucomplex_E *arrin1,cucomplex_E *arrin2,cucomplex_E *arrout ,int n){$/;"	f
diviCuda	mathFloatCuda_E.h	/^int diviCuda(float*arrin1,float *arrin2,float *arrout ,int n){$/;"	f
diviCuda_Kernel	mathFloatCuda_E.h	/^__global__ void diviCuda_Kernel(cucomplex_E *arrin1,cucomplex_E *arrin2 ,cucomplex_E *arrout ,int n){$/;"	f
diviCuda_Kernel	mathFloatCuda_E.h	/^__global__ void diviCuda_Kernel(float*arrin1,float*arrin2 ,float *arrout ,int n){$/;"	f
fftw_iodim64_do_not_use_me	fftw322/include/fftw3.h	/^struct fftw_iodim64_do_not_use_me {$/;"	s
fftw_iodim_do_not_use_me	fftw322/include/fftw3.h	/^struct fftw_iodim_do_not_use_me {$/;"	s
fftw_r2r_kind_do_not_use_me	fftw322/include/fftw3.h	/^enum fftw_r2r_kind_do_not_use_me {$/;"	g
fftw_read_char_func_do_not_use_me	fftw322/include/fftw3.h	/^typedef int (*fftw_read_char_func_do_not_use_me)(void *);$/;"	t
fftw_write_char_func_do_not_use_me	fftw322/include/fftw3.h	/^typedef void (*fftw_write_char_func_do_not_use_me)(char c, void *);$/;"	t
is	fftw322/include/fftw3.h	/^     int is;			\/* input stride *\/$/;"	m	struct:fftw_iodim_do_not_use_me
is	fftw322/include/fftw3.h	/^     ptrdiff_t is;			\/* input stride *\/$/;"	m	struct:fftw_iodim64_do_not_use_me
lowerTrunc	mathFloat_E.h	22;"	d
lowerTrunc	math_E.h	22;"	d
maxThreadsDim	mathFloatCuda_E.h	/^const int maxThreadsDim=1024;$/;"	v
max_E	mathFloat_E.h	8;"	d
max_E	math_E.h	8;"	d
min_E	mathFloat_E.h	9;"	d
min_E	math_E.h	9;"	d
minusCuda	mathCuda_E.h	/^int minusCuda(double*arrin1,double *arrin2,double *arrout ,int n){$/;"	f
minusCuda	mathFloatCuda_E.h	/^int minusCuda(float*arrin1,float *arrin2,float *arrout ,int n){$/;"	f
minusCuda_Kernel	mathCuda_E.h	/^__global__ void minusCuda_Kernel(double*arrin1,double*arrin2 ,double *arrout ,int n){$/;"	f
minusCuda_Kernel	mathFloatCuda_E.h	/^__global__ void minusCuda_Kernel(float*arrin1,float*arrin2 ,float *arrout ,int n){$/;"	f
mod2P_E	mathFloat_E.h	18;"	d
mod2P_E	math_E.h	18;"	d
multiByNumberCuda	mathCuda_E.h	/^int multiByNumberCuda(complex_E*arrin,complex_E num,complex_E *arrout ,int n){$/;"	f
multiByNumberCuda	mathCuda_E.h	/^int multiByNumberCuda(complex_E*arrin,double num,complex_E *arrout ,int n){$/;"	f
multiByNumberCuda	mathCuda_E.h	/^int multiByNumberCuda(complex_E*arrin,double num,double *arrout ,int n){$/;"	f
multiByNumberCuda	mathCuda_E.h	/^int multiByNumberCuda(double*arrin,double num,double *arrout ,int n){$/;"	f
multiByNumberCuda	mathFloatCuda_E.h	/^int multiByNumberCuda(cucomplex_E*arrin,cucomplex_E num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda	mathFloatCuda_E.h	/^int multiByNumberCuda(cucomplex_E*arrin,float num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda	mathFloatCuda_E.h	/^int multiByNumberCuda(cucomplex_E*arrin,float num,float *arrout ,int n){$/;"	f
multiByNumberCuda	mathFloatCuda_E.h	/^int multiByNumberCuda(float*arrin,float num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda	mathFloatCuda_E.h	/^int multiByNumberCuda(float*arrin,float num,float *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(complex_E*arrin,complex_E num,complex_E *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(complex_E*arrin,double num,complex_E *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(complex_E*arrin,double num,double *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(double*arrin,double num,double *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(cucomplex_E*arrin,cucomplex_E num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(cucomplex_E*arrin,float num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(cucomplex_E*arrin,float num,float *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(float*arrin,float num,cucomplex_E *arrout ,int n){$/;"	f
multiByNumberCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiByNumberCuda_Kernel(float*arrin,float num,float *arrout ,int n){$/;"	f
multiCuda	mathCuda_E.h	/^int multiCuda(double*arrin1,double *arrin2,complex_E *arrout ,int n){$/;"	f
multiCuda	mathCuda_E.h	/^int multiCuda(double*arrin1,double *arrin2,double *arrout ,int n){$/;"	f
multiCuda	mathFloatCuda_E.h	/^int multiCuda(cucomplex_E *arrin1,cucomplex_E *arrin2,cucomplex_E *arrout ,int n){$/;"	f
multiCuda	mathFloatCuda_E.h	/^int multiCuda(cucomplex_E *arrin1,float *arrin2,float *arrout ,int n){$/;"	f
multiCuda	mathFloatCuda_E.h	/^int multiCuda(float *arrin1,float *arrin2, cucomplex_E *arrout ,int n){$/;"	f
multiCuda	mathFloatCuda_E.h	/^int multiCuda(float*arrin1,float *arrin2,float *arrout ,int n){$/;"	f
multiCuda_Kernel	mathCuda_E.h	/^__global__ void multiCuda_Kernel(double*arrin1,double*arrin2 ,complex_E *arrout ,int n){$/;"	f
multiCuda_Kernel	mathCuda_E.h	/^__global__ void multiCuda_Kernel(double*arrin1,double*arrin2 ,double *arrout ,int n){$/;"	f
multiCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiCuda_Kernel(cucomplex_E *arrin1,float*arrin2 ,float *arrout ,int n){$/;"	f
multiCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiCuda_Kernel(cucomplex_E*arrin1,cucomplex_E *arrin2,cucomplex_E *arrout ,int n){$/;"	f
multiCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiCuda_Kernel(float*arrin1,float*arrin2 ,cucomplex_E *arrout ,int n){$/;"	f
multiCuda_Kernel	mathFloatCuda_E.h	/^__global__ void multiCuda_Kernel(float*arrin1,float*arrin2 ,float *arrout ,int n){$/;"	f
n	fftw322/include/fftw3.h	/^     int n;                     \/* dimension size *\/$/;"	m	struct:fftw_iodim_do_not_use_me
n	fftw322/include/fftw3.h	/^     ptrdiff_t n;                     \/* dimension size *\/$/;"	m	struct:fftw_iodim64_do_not_use_me
operator !=	mathFloat_E.h	/^int operator!=(complex_E c1,complex_E c2){if (c1.Re!=c2.Re||c1.Im!=c2.Im)return 1;else return 0;}$/;"	f
operator !=	mathFloat_E.h	/^int operator!=(complex_E c1,float c2){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
operator !=	mathFloat_E.h	/^int operator!=(float c2,complex_E c1){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
operator !=	math_E.h	/^int operator!=(complex_E c1,complex_E c2){if (c1.Re!=c2.Re||c1.Im!=c2.Im)return 1;else return 0;}$/;"	f
operator !=	math_E.h	/^int operator!=(complex_E c1,double c2){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
operator !=	math_E.h	/^int operator!=(double c2,complex_E c1){if (c1.Re!=c2||c1.Im!=0)return 1;else return 0;}$/;"	f
operator ()	data.h	/^    type	&Data<type, type_dev>::operator ()(int p1,...){$/;"	f	class:DATA_NS::Data
operator *	mathFloat_E.h	/^complex_E operator*(complex_E c,float d){ return complex_E(c.Re*d,c.Im*d);}$/;"	f
operator *	mathFloat_E.h	/^complex_E operator*(complex_E c1,complex_E c2){ return complex_E(c1.Re*c2.Re-c1.Im*c2.Im,c1.Re*c2.Im+c1.Im*c2.Re);}$/;"	f
operator *	mathFloat_E.h	/^complex_E operator*(float d,complex_E c){ return complex_E(c.Re*d,c.Im*d);}$/;"	f
operator *	math_E.h	/^complex_E operator*(complex_E c,double d){ return complex_E(c.Re*d,c.Im*d);}$/;"	f
operator *	math_E.h	/^complex_E operator*(complex_E c1,complex_E c2){ return complex_E(c1.Re*c2.Re-c1.Im*c2.Im,c1.Re*c2.Im+c1.Im*c2.Re);}$/;"	f
operator *	math_E.h	/^complex_E operator*(double d,complex_E c){ return complex_E(c.Re*d,c.Im*d);}$/;"	f
operator +	mathFloat_E.h	/^complex_E operator+(complex_E c,float d){ return complex_E(d+c.Re,c.Im); }$/;"	f
operator +	mathFloat_E.h	/^complex_E operator+(complex_E c1,complex_E c2){return complex_E(c1.Re+c2.Re,c1.Im+c2.Im); }$/;"	f
operator +	mathFloat_E.h	/^complex_E operator+(float d,complex_E c){ return complex_E(d+c.Re,c.Im); }$/;"	f
operator +	math_E.h	/^complex_E operator+(complex_E c,double d){ return complex_E(d+c.Re,c.Im); }$/;"	f
operator +	math_E.h	/^complex_E operator+(complex_E c1,complex_E c2){return complex_E(c1.Re+c2.Re,c1.Im+c2.Im); }$/;"	f
operator +	math_E.h	/^complex_E operator+(double d,complex_E c){ return complex_E(d+c.Re,c.Im); }$/;"	f
operator -	mathFloat_E.h	/^complex_E operator-(complex_E c,float d){ return complex_E(c.Re-d,c.Im); }$/;"	f
operator -	mathFloat_E.h	/^complex_E operator-(complex_E c1,complex_E c2){ return complex_E(c1.Re-c2.Re,c1.Im-c2.Im); }$/;"	f
operator -	mathFloat_E.h	/^complex_E operator-(float d,complex_E c){ return complex_E(d-c.Re,-c.Im); }$/;"	f
operator -	math_E.h	/^complex_E operator-(complex_E c,double d){ return complex_E(c.Re-d,c.Im); }$/;"	f
operator -	math_E.h	/^complex_E operator-(complex_E c1,complex_E c2){ return complex_E(c1.Re-c2.Re,c1.Im-c2.Im); }$/;"	f
operator -	math_E.h	/^complex_E operator-(double d,complex_E c){ return complex_E(d-c.Re,-c.Im); }$/;"	f
operator /	mathFloat_E.h	/^complex_E operator\/(complex_E c,float d){ return complex_E(c.Re\/d,c.Im\/d);}$/;"	f
operator /	mathFloat_E.h	/^complex_E operator\/(complex_E c1,complex_E c2){ float mo=pow2_E(c2.Re)+pow2_E(c2.Im);return complex_E((c1.Re*c2.Re+c1.Im*c2.Im)\/mo,(c1.Im*c2.Re-c1.Re*c2.Im)\/mo);}$/;"	f
operator /	mathFloat_E.h	/^complex_E operator\/(float d,complex_E c){ float mo=pow2_E(c.Re)+pow2_E(c.Im); return complex_E(c.Re*d\/mo,c.Im*d\/mo);}$/;"	f
operator <<	mathFloat_E.h	/^	friend ostream& operator<<(ostream &os,complex_E &c){$/;"	f	class:complex_E
operator <<	math_E.h	/^	friend ostream& operator<<(ostream &os,complex_E &c){$/;"	f	class:complex_E
operator =	mathFloat_E.h	/^	complex_E& operator =(float left_d){$/;"	f	class:complex_E
operator =	math_E.h	/^	complex_E& operator =(double left_d){$/;"	f	class:complex_E
operator []	data.h	/^    type	&Data<type, type_dev>::operator [](const int p1){$/;"	f	class:DATA_NS::Data
operator double	math_E.h	/^	operator double(){return Re;}$/;"	f	class:complex_E
operator float	mathFloat_E.h	/^	operator float(){return Re;}$/;"	f	class:complex_E
os	fftw322/include/fftw3.h	/^     int os;			\/* output stride *\/$/;"	m	struct:fftw_iodim_do_not_use_me
os	fftw322/include/fftw3.h	/^     ptrdiff_t os;			\/* output stride *\/$/;"	m	struct:fftw_iodim64_do_not_use_me
posArr	ComplexData.h	/^    int 	*posArr;$/;"	m	class:ComplexData
pow2_E	mathFloat_E.h	12;"	d
pow2_E	math_E.h	12;"	d
pow3_E	mathFloat_E.h	13;"	d
pow3_E	math_E.h	13;"	d
pow4_E	mathFloat_E.h	14;"	d
pow4_E	math_E.h	14;"	d
pow5_E	mathFloat_E.h	15;"	d
pow5_E	math_E.h	15;"	d
pow6_E	mathFloat_E.h	16;"	d
pow6_E	math_E.h	16;"	d
randreal	mathFloat_E.h	/^float randreal(){ return rand()*1.0\/RAND_MAX; }$/;"	f
randreal	mathFloat_E.h	/^float randreal(float max){ return randreal()*max; }$/;"	f
randreal	mathFloat_E.h	/^float randreal(float min,float max){ return min+randreal()*(max-min); }$/;"	f
randreal	math_E.h	/^double randreal(){ return rand()*1.0\/RAND_MAX; }$/;"	f
randreal	math_E.h	/^double randreal(double max){ return randreal()*max; }$/;"	f
randreal	math_E.h	/^double randreal(double min,double max){ return min+randreal()*(max-min); }$/;"	f
real	data.h	15;"	d
showArrayC	mathFloatCuda_E.h	/^int showArrayC(float* arrin,int n,bool ShowAll){$/;"	f
showArrayCuda	mathFloatCuda_E.h	/^int showArrayCuda(float* arrin_dev,int n,bool ShowAll){$/;"	f
squareCuda_Kernel	mathCuda_E.h	/^__global__ void squareCuda_Kernel(double* arrin,double*arrout,int n){$/;"	f
squareCuda_Kernel	mathFloatCuda_E.h	/^__global__ void squareCuda_Kernel(float* arrin,float*arrout,int n){$/;"	f
uperTrunc	mathFloat_E.h	21;"	d
uperTrunc	math_E.h	21;"	d
~ComplexData	ComplexData.h	/^ComplexData::~ComplexData(){\/\/free allocatted main Arr memory$/;"	f	class:ComplexData
~Data	data.h	/^    Data<type,type_dev>::~Data(){\/\/free allocatted main Arr memory$/;"	f	class:DATA_NS::Data
