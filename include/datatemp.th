
/*
 this .h file is desighed for creating the temp data class for the mathematical operatioin like + and - which requires temporary values
 and the class declaims a global varilbe named DataTemp
 */

#ifndef 	TEMPDATA_EINS_H
#define	TEMPDATA_EINS_H

namespace	DATA_NS{
  //the private class DataNode definition
  template<class type> class DataNode{
	 public:
	   static int		TotalNumber; //the number of total datanode applied
	   int			SerialCode;
	   int			N;
	   Data<type> 		data;
	   DataNode<type>	*next,*previous;
	   DataNode(){ next=NULL; previous=NULL;N=0;TotalNumber++; SerialCode=TotalNumber;}
    };


  class DataTemp{
    public:
	 int N;	// the number of datanode applied
	 int DATA_POSITION_FLAG; //device of math operation
	 //template<class type> class DataNode;
	 DataNode<Real>	*HeadReal,*pReal,*EndReal;
	 DataNode<Complex>	*HeadComplex,*pComplex,*EndComplex;
    public:
	 DataTemp();
	 ~DataTemp();
	 template<class ostype> void ShowRes(ostype &os);
	 //data will point to a Data in DataTemp, so data should be null
	 template<class type> Data<type> *GetTemp(Data<type> &data);
	 template<class type> Data<Real> *GetRealTemp(Data<type> &tdata);
	 template<class type> Data<Complex> *GetComplexTemp(Data<type> &tdata);
  };
  // constuct function 
  inline DataTemp::DataTemp(){
    N		=	0;
    HeadReal	= new DataNode<Real>;
    EndReal	= new DataNode<Real>; 
    HeadReal->next=EndReal; EndReal->previous=HeadReal;
    pReal=EndReal; 
    //-------------
    HeadComplex	= new DataNode<Complex>;
    EndComplex		= new DataNode<Complex>;
    HeadComplex->next= EndComplex; EndComplex->previous=HeadComplex; 
    pComplex=EndComplex;
    DATA_POSITION_FLAG = Data_HOST;
  }
  //unconstruct function
  inline DataTemp::~DataTemp(){
    pReal=EndReal;
    while (pReal!=HeadReal){
	 pReal=pReal->previous;
	 delete pReal->next;
    }
    delete pReal;
    pComplex=EndComplex;
    while (pComplex!=HeadComplex){
	 pComplex=pComplex->previous;
	 delete pComplex->next;
    }
    delete pComplex;
  }
  template<class ostype> void DataTemp::ShowRes(ostype &os){
    os<<"The resources cosumed:"<<endl;
    os<<"  Real       :\t"<<DataNode<Real>::TotalNumber<<endl;
    os<<"  Complex    :\t"<<DataNode<Complex>::TotalNumber<<endl;
    os<<"  Real  Temp :\t"<<DataNode<Real>::TotalNumber<<endl;
    os<<"Complex Temp :\t"<<DataNode<Complex>::TotalNumber<<endl;
  }

  template<class type> Data<type> *DataTemp::GetTemp(Data<type> &tdata){
    DataNode<type>*end,*p,*q;
    if ( typeid(type) == typeid(Complex) ){ end	=(DataNode<type>*) EndComplex; p	=(DataNode<type>*) pComplex; 
    }else{ end	=(DataNode<type>*) EndReal;	  p	=(DataNode<type>*)	pReal; }
    //----------
    while ( (p != end)&& (p->N < tdata.N() ) ) 
	 p = p->next;
    while ( (tdata.N()) <= (p->previous->N)  ) 
	 p = p->previous;
    if ( !( p->data == tdata ) ) { 
	 // create new node
	 q = new DataNode<type>;  q->data.Init(tdata.Dimension,Data_HOST_DEV); q->N = tdata.N();
	 // add new node
	 q->previous=	p->previous;   q->next	=	p;
	 // change previous connection
	 p->previous->next = q;
	 p->previous=	q; 
	 // change p position
	 p		=	q;
	 this->N++;
    }
    if (typeid(type)==typeid(Complex)){ 
	 pComplex=(DataNode<Complex>*) p; 
    }else{ 
	 pReal= (DataNode<Real>*) p;
    }
    return &(p->data); 
  }
  template<class type> Data<Real> *DataTemp::GetRealTemp(Data<type> &tdata){
    DataNode<Real>*end,*p,*q;
    end	= EndReal;	  p	=pReal; 
    //----------
    while ( (p != end)&& (p->N < tdata.N() ) ) 
	 p = p->next;
    while ( (tdata.N()) <= (p->previous->N)  ) 
	 p = p->previous;
    if ( !( p->data == tdata ) ) { 
	 // create new node
	 q = new DataNode<Real>;  q->data.Init(tdata.Dimension,Data_HOST_DEV); q->N = tdata.N();
	 // add new node
	 q->previous=	p->previous;   q->next	=	p;
	 // change previous connection
	 p->previous->next = q;
	 p->previous=	q; 
	 // change p position
	 p		=	q;
	 this->N++;
    }
    pReal=  p;
    return &(p->data); 
  }


  template<class type> Data<Complex> *DataTemp::GetComplexTemp(Data<type> &tdata){
    DataNode<Complex>*end,*p,*q;
    end	= EndComplex; p	= pComplex; 
    //----------
    while ( (p != end)&& (p->N < tdata.N() ) ) 
	 p = p->next;
    while ( (tdata.N()) <= (p->previous->N)  ) 
	 p = p->previous;
    if ( !( p->data == tdata ) ) { 
	 // create new node
	 q = new DataNode<Complex>;  q->data.Init(tdata.Dimension,Data_HOST_DEV); q->N = tdata.N();
	 // add new node
	 q->previous=	p->previous;   q->next	=	p;
	 // change previous connection
	 p->previous->next = q;
	 p->previous=	q; 
	 // change p position
	 p		=	q;
	 this->N++;
    }
    pComplex= p; 
    return &(p->data); 
  }

}

#endif
