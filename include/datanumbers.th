
#ifndef 	NUMBERS_Eins_H
#define	NUMBERS_Eins_H

#include<iostream>
#include<fstream>
using namespace std;

#define 	real	float
#define   pow2_E(x)	((x)*(x))
namespace DATA_NS{
  class Int;
  class Real;
  class Complex;

  class Int{
  public:
	int In;
	inline __host__ __device__ Int(){};
	inline __host__ __device__ Int(int in){In=in;}
	inline explicit __host__ __device__ Int(Real r);//{ Re=r.Re;}// defined at the end
	inline explicit __host__ __device__ Int(Complex c);//{ Re=c.Re;}
	inline __host__ __device__ int c_int(){return In;};
	// << overload host only
	inline friend ofstream &operator<<(ofstream &os, Int R){ os<<R.In; return os;}
	inline friend ostream &operator<<(ostream &os, Int R){ os<<R.In; return os;}
	inline  friend ifstream&operator>>(ifstream&is,Int&R){is>>R.In;return is;}
	inline  friend istream&operator>>(istream&is,Int&R){is>>R.In;return is;}
	// = overload
	inline __host__ __device__ Int &operator=(Int v){In=v.In;return *this;};
	// + - * / overload
	inline __host__ __device__ friend Int operator+(const Int r1,const Int r2){return Int(r1.In+r2.In); }
	inline __host__ __device__ friend Int operator-(const Int r1,const Int r2){return Int(r1.In-r2.In); }
	inline __host__ __device__ friend Int operator*(const Int r1,const Int r2){return Int(r1.In*r2.In); }
	inline __host__ __device__ friend Int operator/(const Int r1,const Int r2){return Int(r1.In/r2.In); }
	// == != > < >= <=
	inline __host__ __device__ friend bool operator!=(const Int r1,const Int r2){return (r1.In!=r2.In) ;}
	inline __host__ __device__ friend bool operator==(const Int r1,const Int r2){return (r1.In==r2.In) ;}
	inline __host__ __device__ friend bool operator>(const Int r1,const Int r2){ return (r1.In>r2.In) ;}
	inline __host__ __device__ friend bool operator<(const Int r1,const Int r2){ return (r1.In<r2.In) ;}
	inline __host__ __device__ friend bool operator<=(const Int r1,const Int r2){ return (r1.In<=r2.In) ;}
	inline __host__ __device__ friend bool operator>=(const Int r1,const Int r2){ return (r1.In>=r2.In) ;}
  };

  class Real{
  public:
	real Re;
	inline __host__ __device__ Real(){}
	inline __host__ __device__ Real(real r){ Re=r;}
	inline explicit __host__ __device__ Real(Complex c);//{ Re=c.Re;}
	inline __host__ __device__ real c_real(){return Re;};
	// << overload host only
	inline friend ofstream&operator<<(ofstream&os,Real R){os<<R.Re;return os;}
	inline friend ostream&operator<<(ostream&os,Real R){os<<R.Re;return os;}
	inline friend ifstream&operator>>(ifstream&is,Real&R){is>>R.Re;return is;}
	inline friend istream&operator>>(istream&is,Real&R){is>>R.Re;return is;}
	// overload = and - (reverse number) and +=
	inline __host__ __device__ Real &operator=(Real v){Re=v.Re;return *this;};
	inline __host__ __device__ Real operator-(){return Real(-Re); };
	inline __host__ __device__ Real &operator+=(Real v){Re=v.Re+Re;return *this;};
	// + - * / overload
	inline __host__ __device__ friend Real operator+(const Real r1,const Real r2){return Real(r1.Re+r2.Re); }
	inline __host__ __device__ friend Real operator-(const Real r1,const Real r2){return Real(r1.Re-r2.Re); }
	inline __host__ __device__ friend Real operator*(const Real r1,const Real r2){return Real(r1.Re*r2.Re); }
	inline __host__ __device__ friend Real operator/(const Real r1,const Real r2){return Real(r1.Re/r2.Re); }
	// ^ overload
	inline __host__ __device__ friend Real operator^(const Real r1,const Real r2){return Real(pow(r1.Re,r2.Re)); }
	// == != > < >= <=
	inline __host__ __device__ friend bool operator!=(const Real r1,const Real r2){return (r1.Re!=r2.Re) ;}
	inline __host__ __device__ friend bool operator==(const Real r1,const Real r2){return (r1.Re==r2.Re) ;}
	inline __host__ __device__ friend bool operator>(const Real r1,const Real r2){ return (r1.Re>r2.Re) ;}
	inline __host__ __device__ friend bool operator<(const Real r1,const Real r2){ return (r1.Re<r2.Re) ;}
	inline __host__ __device__ friend bool operator<=(const Real r1,const Real r2){ return (r1.Re<=r2.Re) ;}
	inline __host__ __device__ friend bool operator>=(const Real r1,const Real r2){ return (r1.Re>=r2.Re) ;}
	inline __host__ __device__ friend Real sqrt(const Real r){ return Real(sqrt(r.Re)) ;}
	inline __host__ __device__ friend Real abs(const Real r){ if (r.Re>0) return Real(r.Re);else return Real(-r.Re) ;}
  };


  class Complex{
  public:
	Real Re;
	Real Im;
	inline __host__ __device__ Complex(){}
	inline __host__ __device__ Complex(Real re){ Re=re; Im=0; }
	inline __host__ __device__ Complex(Real re,Real im){ Re=re; Im=im; }
	inline __host__ __device__ Complex(real re){ Re=re; Im=0; }
	inline __host__ __device__ Complex(real re,real im){ Re=re; Im=im; }
	explicit inline __host__ __device__ Complex(real c[2]){ Re=c[0]; Im=c[1]; }
	//------------------------------------------------------
	// overload = and - (reverse number) and += -= *= /=
	inline __host__ __device__ Complex &operator=(const Complex v){Re=v.Re;Im=v.Im;return *this;}
	inline __host__ __device__ Complex operator-(){return Complex(-Re,-Im);}
	inline __host__ __device__ Complex &operator+=(const Complex v){Re=v.Re+Re;Im=v.Im+Im;return *this;}
	inline __host__ __device__ Complex &operator-=(const Complex v){Re=Re-v.Re;Im=Im-v.Im;return *this;}
	inline __host__ __device__ Complex &operator*=(const Complex v){Re=v.Re*Re;Im=v.Im*Im;return *this;}
	inline __host__ __device__ Complex &operator/=(const Complex v){Real mo=pow2_E(v.Re)+pow2_E(v.Im); Re=(Re*v.Re+Im*v.Im)/mo;Im=(Im*v.Re-Re*v.Im)/mo;return *this;}
	// overload << >> 
	inline friend ofstream& operator<<(ofstream &os,Complex &c){ os<<"("<<c.Re<<","<<c.Im<<")"; return os; }
	inline friend ostream& operator<<(ostream &os,Complex &c){ os<<"("<<c.Re<<","<<c.Im<<")"; return os; }
	inline friend ifstream& operator>>(ifstream &is,Complex &c){ char ctemp; is>>ctemp>>c.Re>>ctemp>>c.Im>>ctemp; return is; }
	inline friend istream& operator>>(istream &is,Complex &c){ char ctemp; is>>ctemp>>c.Re>>ctemp>>c.Im>>ctemp; return is; }
	// overload + - * /
	inline __host__ __device__ friend Complex operator+(const Complex c1,const Complex c2){return Complex(c1.Re+c2.Re,c1.Im+c2.Im); }
	inline __host__ __device__ friend Complex operator-(const Complex c1,const Complex c2){ return Complex(c1.Re-c2.Re,c1.Im-c2.Im); }
	inline __host__ __device__ friend Complex operator*(const Complex c1,const Complex c2){ return Complex(c1.Re*c2.Re-c1.Im*c2.Im,c1.Re*c2.Im+c1.Im*c2.Re);}
	inline __host__ __device__ friend Complex operator/(const Complex c1,const Complex c2){ Real mo=pow2_E(c2.Re)+pow2_E(c2.Im);return Complex((c1.Re*c2.Re+c1.Im*c2.Im)/mo,(c1.Im*c2.Re-c1.Re*c2.Im)/mo);}
	// overload ^
	//__host__ __device__ friend Complex operator^(const Complex c, const int index){ Complex ct=c;for(int i=2;i<=index; i++) ct=c*ct; return ct; }
	// overload != ==
	inline __host__ __device__ friend int operator!=(const Complex c1,const Complex c2){if (c1.Re!=c2.Re||c1.Im!=c2.Im)return 1;else return 0;}
	inline __host__ __device__ friend int operator==(const Complex c1,const Complex c2){if (c1.Re!=c2.Re||c1.Im!=c2.Im)return 0;else return 1;}

  };
   
  // some definitions need something ahead
  // Complex -> Real if not declared inline this will not overcome the problem of multi def  when link after being complied many times 
  inline __host__ __device__ Int::Int(Real r){ In=(int) r.Re;}
  inline __host__ __device__ Int::Int(Complex c){ In=(int) c.Re.Re;}
  inline __host__ __device__ Real::Real(Complex c){ Re= c.Re.Re;}
  //^ of int  when index is integer
  template<class type> __host__ __device__ type operator^(type r1, int r2) {
	type temp=1; 
	for (int i=1; i<= r2; i++) 
	  temp=temp *r1;
	return temp;
  }

}

#endif

