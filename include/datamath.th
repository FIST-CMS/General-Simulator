
#include<typeinfo>

#ifndef DATAMATH_Eins_H
#define DATAMATH_Eins_H


namespace DATA_NS{
  const int MaxThreads=1024;
  const int MaxBlocks=65535;
  const int ThreadsPerBlock=1024;
#define BlocksNum(x) BlocksNumT<0>(x)
  template<int id> int BlocksNumT(int n){
    int num=(n+ThreadsPerBlock-1)/ThreadsPerBlock;
    if (num>MaxBlocks) return MaxBlocks; 
    else return num;
  }
  //define = ----------------------------------------------------
  //set : *out = *in or *out = num
  template<class T1, class T2> __global__ void set_kernel(T1 *arr1, T2 *arr2,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arr1[tid] = T1( arr2[tid] ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2> void set_device( T1 *arr1, T2 *arr2, int n ){
    if (typeid(T1)==typeid(T2))
	 cudaMemcpy(arr1,arr2,n*sizeof(T1),cudaMemcpyDeviceToDevice);
    else
	 set_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arr1,arr2,n);
  }
  template<class T1, class T2> void set_host( T1 *arr1, T2 *arr2, int n ){
    if (typeid(T1)==typeid(T2))
	 memcpy((void*)arr1,(void*)arr2,n*sizeof(T1));
    else
	 for (int i=0;i<n;i++) arr1[i]=T1(arr2[i]);
  }
  // *arr = num
  template<class T1, class T2> __global__ void set_kernel(T1 *arr, T2 num,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arr[tid] = T1( num ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2> void set_device( T1 *arr, T2 num, int n ){
	 set_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arr,num,n);
    }
  template<class T1, class T2> void set_host( T1 *arr, T2 num, int n ){
    for (int i=0;i<n;i++) 
	 arr[i]=T1(num);
  }

  //define + ---------------------------------------------------
  //number add *out = num + (*in) or (*in) + num
  template<class T1, class T2,class T3> __global__ void add_kernel(T1 *arrout, T2 num,T3 *arrin,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin[tid]+num ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2, class T3> void add_device(T1 *arrout, T2 num,T3 *arrin,int n){
    add_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
  }
  template<class T1, class T2, class T3> void add_host(T1 *arrout, T2 num,T3 *arrin,int n){
    for (int i=0;i<n;i++) arrout[i]= T1(num + arrin[i]);
  }
  template<class T1, class T2, class T3> void add_device(T1 *arrout, T2 *arrin,T3 num,int n){
    add_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
  }
  template<class T1, class T2, class T3> void add_host(T1 *arrout, T2 *arrin,T3 num,int n){
    for (int i=0;i<n;i++) 
	 arrout[i]= T1(num + arrin[i]);
  }
  //add: *out = *in1 + *in2
  template<class T1, class T2,class T3> __global__ void add_kernel(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    int tid= threadIdx.x+blockIdx.x*blockDim.x;
    while (tid<n) {
	 arrout[tid] = T1( arrin1[tid]+ arrin2[tid] );
	 tid+=blockDim.x*gridDim.x;
    }
  }
  template<class T1, class T2, class T3> void add_device(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    add_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin1,arrin2,n);
  }
  template<class T1, class T2, class T3> void add_host(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    for (int tid =0;tid<n;tid++) 
	 arrout[tid]= T1( arrin1[tid] + arrin2[tid]);
  }
  //define - ----------------------------------------------------
  //  *out = *in - num
  template<class T1, class T2,class T3> __global__ void minus_kernel(T1 *arrout, T2 *arrin,T3 num,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin[tid]-num );
	   tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2, class T3> void minus_device(T1 *arrout, T2 *arrin,T3 num,int n){
	 minus_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin,num,n);
    }
  template<class T1, class T2, class T3> void minus_host(T1 *arrout, T2 *arrin,T3 num,int n){
    for (int i=0;i<n;i++) arrout[i] = T1( arrin[i] - num);
  }

  //minus  *out = num - *in
  template<class T1, class T2,class T3> __global__ void minus_kernel(T1 *arrout, T2 num,T3 *arrin,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( num-arrin[tid] );
	   tid+=blockDim.x*gridDim.x;
	 }
    } 
  template<class T1, class T2, class T3> void minus_device(T1 *arrout, T2 num,T3 *arrin,int n){
    minus_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
  }
  template<class T1, class T2, class T3> void minus_host(T1 *arrout, T2 num,T3 *arrin,int n){
    for (int tid=0;tid<n;tid++)  
	 arrout[tid] = T1( num-arrin[tid] );  
  }

  //minus  *out = *in1 - *in2
  template<class T1, class T2,class T3> __global__ void minus_kernel(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    int tid= threadIdx.x+blockIdx.x*blockDim.x;
    while (tid<n) {
	 arrout[tid] = T1( arrin1[tid]-arrin2[tid] ); tid+=blockDim.x*gridDim.x;
    }
  }
  template<class T1, class T2, class T3> void minus_device(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    minus_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin1,arrin2,n);
  }
  template<class T1, class T2, class T3> void minus_host(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    for (int tid=0;tid<n;tid++)  arrout[tid] = T1( arrin1[tid]-arrin2[tid] );
  }

  //define * ---------------------------------------------------
  //num multi *out = num * (*in) or (*in) * num
  template<class T1, class T2,class T3> __global__ void multi_kernel(T1 *arrout, T2 num,T3 *arrin,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin[tid]*num ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2, class T3> void multi_device(T1 *arrout, T2 num,T3 *arrin,int n){
	 multi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
    }
  template<class T1, class T2, class T3> void multi_host(T1 *arrout, T2 num,T3 *arrin,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( arrin[tid]*num ); 
  }
  template<class T1, class T2, class T3> void multi_device(T1 *arrout, T2 *arrin,T3 num,int n){
	 multi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
  }
  template<class T1, class T2, class T3> void multi_host(T1 *arrout, T2 *arrin,T3 num,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( arrin[tid] * num ); 
  }
  //multi: *out = *in1 * *in2
  template<class T1, class T2,class T3> __global__ void multi_kernel(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin1[tid]* arrin2[tid] ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2, class T3> void multi_device(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
	 multi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin1,arrin2,n);
    }
  template<class T1, class T2, class T3> void multi_host(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( arrin1[tid]* arrin2[tid] );
  }
  //define / ----------------------------------------------------
  //numDiv  *out = *in / num
  template<class T1, class T2,class T3> __global__ void divi_kernel(T1 *arrout, T2 *arrin,T3 num,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin[tid]/num ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2, class T3> void divi_device(T1 *arrout, T2 *arrin,T3 num,int n){
    divi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin,num,n);
  }
  template<class T1, class T2, class T3> void divi_host(T1 *arrout, T2 *arrin,T3 num,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( arrin[tid] / num );
  }

  //numDiv  *out = num / *in
  template<class T1, class T2,class T3> __global__ void divi_kernel(T1 *arrout, T2 num,T3 *arrin,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( num/arrin[tid] ); tid+=blockDim.x*gridDim.x;
	 }
    }

  template<class T1, class T2, class T3> void divi_device(T1 *arrout, T2 num,T3 *arrin,int n){
    divi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,num,arrin,n);
  }
  template<class T1, class T2, class T3> void divi_host(T1 *arrout, T2 num,T3 *arrin,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( num / arrin[tid]  );
  }
  //div  *out = *in1 / *in2
  template<class T1, class T2,class T3> __global__ void divi_kernel(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    int tid= threadIdx.x+blockIdx.x*blockDim.x;
    while (tid<n) {
	 arrout[tid] = T1( arrin1[tid]/arrin2[tid] ); tid+=blockDim.x*gridDim.x;
    }
  }
  template<class T1, class T2, class T3> void divi_device(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    divi_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin1,arrin2,n);
  }
  template<class T1, class T2, class T3> void divi_host(T1 *arrout, T2 *arrin1,T3 *arrin2,int n){
    for (int tid=0; tid<n; tid++) arrout[tid] = T1( arrin1[tid] / arrin2[tid]  );
  }
  //define ^ ----------------------------------------------------
  //numDiv  *out = *in ^ num
  template<class T1, class T2,class T3> __global__ void power_kernel(T1 *arrout, T2 *arrin,T3 num,int n){
	 int tid= threadIdx.x+blockIdx.x*blockDim.x;
	 while (tid<n) {
	   arrout[tid] = T1( arrin[tid]^num ); tid+=blockDim.x*gridDim.x;
	 }
    }
  template<class T1, class T2,class T3> void power_device(T1 *arrout, T2 *arrin,T3 num,int n){
	 power_kernel<<<BlocksNum(n),ThreadsPerBlock>>>(arrout,arrin,num,n);
    }
  template<class T1, class T2,class T3> void power_host(T1 *arrout, T2 *arrin,T3 num,int n){
    for (int tid=0; tid<n; tid++) 
	 arrout[tid] = T1( arrin[tid]^num );
  }



  // the inverse of a matrix
  template<class type> int GaussCMInverse(type *AA,type *B,int n){
	int i,j,k;
	type temp;
	type *A;
	A=(type *)malloc(sizeof(type)*n*n);

	for (int i=0;i<n;i++)
		for (int j=0;j<n;j++){
			if (i==j) B[i*n+j]=1;else B[i*n+j]=0;
			A[i*n+j]=AA[i*n+j];
		}
	for (i=0;i<n;i++){
		//find the maximum one  ...
		k=i;
		temp=abs(A[i*n+i]);
		for (j=i;j<n;j++)
			if (abs(A[j*n+i])>temp){ k=j;temp=abs(A[j*n+i]); }
		//if no answer return error code -1
		if (temp==0){ free(A); return -1;}
		//change the one with the maximum one  ...
		if (i!=k)
			for (j=0;j<n;j++){
				temp=A[i*n+j];A[i*n+j]=A[k*n+j]; A[k*n+j]=temp;
				temp=B[i*n+j];B[i*n+j]=B[k*n+j]; B[k*n+j]=temp;
			}
		//dismiss 
		for (j=0;j<n;j++){
			if (j==i) continue;
			temp=A[j*n+i]/A[i*n+i];
			for (k=0;k<n;k++) {
				A[j*n+k]=A[j*n+k]-A[i*n+k]*temp;
				B[j*n+k]=B[j*n+k]-B[i*n+k]*temp;
			}
		}
		temp=A[i*n+i];
		for (j=0;j<n;j++){ A[i*n+j]=A[i*n+j]/temp;B[i*n+j]=B[i*n+j]/temp;}
	}
	free(A);
	return 0;
  }
  // the inverse of a matrix
  template<class type> int GaussCMInverse(type *AA,type *A, type *B,int n){
	// in which A is a temp for AA for no change in the original AA matrix
	int i,j,k;
	type temp;
	//type *A;
	//A=(type *)malloc(sizeof(type)*n*n);

	for (int i=0;i<n;i++)
		for (int j=0;j<n;j++){
			if (i==j) B[i*n+j]=1;else B[i*n+j]=0;
			A[i*n+j]=AA[i*n+j];
		}
	for (i=0;i<n;i++){
		//find the maximum one  ...
		k=i;
		temp=abs(A[i*n+i]);
		for (j=i;j<n;j++)
			if (abs(A[j*n+i])>temp){ k=j;temp=abs(A[j*n+i]); }
		//if no answer return error code -1
		if (temp==0){ free(A); return -1;}
		//change the one with the maximum one  ...
		if (i!=k)
			for (j=0;j<n;j++){
				temp=A[i*n+j];A[i*n+j]=A[k*n+j]; A[k*n+j]=temp;
				temp=B[i*n+j];B[i*n+j]=B[k*n+j]; B[k*n+j]=temp;
			}
		//dismiss 
		for (j=0;j<n;j++){
			if (j==i) continue;
			temp=A[j*n+i]/A[i*n+i];
			for (k=0;k<n;k++) {
				A[j*n+k]=A[j*n+k]-A[i*n+k]*temp;
				B[j*n+k]=B[j*n+k]-B[i*n+k]*temp;
			}
		}
		temp=A[i*n+i];
		for (j=0;j<n;j++){ A[i*n+j]=A[i*n+j]/temp;B[i*n+j]=B[i*n+j]/temp;}
	}
	//	free(A);
	return 0;
  }

};

#endif
